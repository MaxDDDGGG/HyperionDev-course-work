### --- OOP Email Simulator --- ###

# --- Email Class --- #
# Create the class, constructor and methods to create a new Email object.
class Email:

    # Declare the class variable, with default value, for emails. 
    emails = []

    # Initialise the instance variables for emails.
    def __init__(self, email_address, subject_line, email_content):
        self.email_address = email_address
        self.subject_line = subject_line
        self.email_content = email_content
        self.has_been_read = False
        Email.emails.append(self)

    # Create the method to change 'has_been_read' emails from False to True.
    def mark_as_read(self):
        self.has_been_read = True

# --- Lists --- #
# Initialise an empty list to store the email objects.
inbox = []

# --- Functions --- #
# Build out the required functions for your program.
def populate_inbox():
        
    # Create 3 sample emails and add it to the Inbox list. 
    email1 = Email("Duck@email.com", "Bread", 
    '''Dear Bar keep,
Got any bread?
    
Love 
Duck
''')
    email2 = Email("Barkeeper@email.co.uk", "RE: Bread", "No, I do not have any bread. This is a bar.")
    email3 = Email("Trev@email.co.uk", "Beer", 
    '''Hi, 
Could I have a beer please governor.
                   
Cheers mate
Trev        
''')

    # Create a function which prints the emailâ€™s subject_line, along with a corresponding number.
def list_emails():
    for i, email in enumerate(Email.emails):
        print(f"{i + 1}. {email.subject_line}")

    # Create a function which displays a selected email.
def read_email(index):
    if 1 <= index <= len(Email.emails):
        selected_email = Email.emails[index - 1]
        print("---------------------------------------")
        print(f"From:\t\t{selected_email.email_address}")
        print(f"Subject:\t{selected_email.subject_line}")
        print(f"Content:\n\n{selected_email.email_content}")
        print("\n* Marked as read *")
        print("----------------------------------------")
    # Once displayed, call the class method to set its 'has_been_read' variable to True.
        selected_email.mark_as_read()


# --- Email Program --- #
# Call the function to populate the Inbox for further use in your program.
populate_inbox()
# Fill in the logic for the various menu operations.
menu = True

while True:
    user_choice = int(input('''\nWould you like to:
    1. Read an email
    2. View unread emails
    3. Quit application

    Enter selection: '''))
    
    if user_choice == 1:
        # add logic here to read an email
        list_emails()
        index_to_read = int(input("Select the Email number you want to read: "))
        if 1 <= index_to_read <= len(Email.emails):
            read_email(index_to_read)
        else:
            print("Invalid selection. Please enter a valid number.")
        
    elif user_choice == 2:
        # add logic here to view unread emails
        unread_emails = [email for email in Email.emails if not email.has_been_read]
        if unread_emails:
            print("\nUnread Emails:")
            for i, email in enumerate(unread_emails):
                print(f"{i + 1}. {email.subject_line}")
        else:
            print("\nNo unread emails.")

    elif user_choice == 3:
        # add logic here to quit application
        print("Goodbye!")
        menu = False
        break  # Exit the loop when quitting

    else:
        print("Oops - incorrect input.")